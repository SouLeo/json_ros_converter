// Generated by gencpp from file temoto2_rosmsg_to_json/semantic_frame.msg
// DO NOT EDIT!


#ifndef TEMOTO2_ROSMSG_TO_JSON_MESSAGE_SEMANTIC_FRAME_H
#define TEMOTO2_ROSMSG_TO_JSON_MESSAGE_SEMANTIC_FRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace temoto2_rosmsg_to_json
{
template <class ContainerAllocator>
struct semantic_frame_
{
  typedef semantic_frame_<ContainerAllocator> Type;

  semantic_frame_()
    : action()
    , parametres()
    , order(0)  {
    }
  semantic_frame_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , parametres(_alloc)
    , order(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parametres_type;
  _parametres_type parametres;

   typedef int32_t _order_type;
  _order_type order;





  typedef boost::shared_ptr< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> const> ConstPtr;

}; // struct semantic_frame_

typedef ::temoto2_rosmsg_to_json::semantic_frame_<std::allocator<void> > semantic_frame;

typedef boost::shared_ptr< ::temoto2_rosmsg_to_json::semantic_frame > semantic_framePtr;
typedef boost::shared_ptr< ::temoto2_rosmsg_to_json::semantic_frame const> semantic_frameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace temoto2_rosmsg_to_json

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'temoto2_rosmsg_to_json': ['/home/selmawanna/temoto2_json/src/temoto2_rosmsg_to_json/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c0e215789ca6fde74fb72c48f7ad63bf";
  }

  static const char* value(const ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc0e215789ca6fde7ULL;
  static const uint64_t static_value2 = 0x4fb72c48f7ad63bfULL;
};

template<class ContainerAllocator>
struct DataType< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "temoto2_rosmsg_to_json/semantic_frame";
  }

  static const char* value(const ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n\
string parametres\n\
int32 order\n\
";
  }

  static const char* value(const ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.parametres);
      stream.next(m.order);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct semantic_frame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::temoto2_rosmsg_to_json::semantic_frame_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "parametres: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parametres);
    s << indent << "order: ";
    Printer<int32_t>::stream(s, indent + "  ", v.order);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEMOTO2_ROSMSG_TO_JSON_MESSAGE_SEMANTIC_FRAME_H
